import speech_recognition as sr
import pyttsx3
import google.generativeai as genai

# Initializing pyttsx3
listening = True
sending_to_gemini = False
engine = pyttsx3.init()

# Set up the Google Gemini API
genai.configure(api_key=" # enter your gemini API key")

generation_config = {
    "temperature": 1,
    "top_p": 0.95,
    "top_k": 0,
    "max_output_tokens": 8192,
}

safety_settings = [
    {
        "category": "HARM_CATEGORY_HARASSMENT",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE"
    },
    {
        "category": "HARM_CATEGORY_HATE_SPEECH",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE"
    },
    {
        "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE"
    },
    {
        "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE"
    },
]
engine.setProperty('rate', 250)  # rate for faster speech
engine.setProperty('volume', 1.0)  # Set volume

model = genai.GenerativeModel(model_name="gemini-1.5-pro-latest",
                              generation_config=generation_config,
                              safety_settings=safety_settings)

convo = model.start_chat(history=[])

def get_response(user_input):
    # Get a response from Gemini
    try:
        response = convo.send_message(user_input)
        gemini_reply = response.text
        return gemini_reply
    except Exception as e:
        print(f"Error getting response from Gemini: {e}")
        return "Sorry, I couldn't process that request."

exit_words = ["exit", "stop", "quit", "bye", "goodbye"]  #exit words here
wake_word = "gemini"  # Wake word here

while listening:
    with sr.Microphone() as source:
        recognizer = sr.Recognizer()
        recognizer.adjust_for_ambient_noise(source)
        recognizer.dynamic_energy_threshold = 3000

        try:
            print("Listening...")
            audio = recognizer.listen(source, timeout=10.0)  # Increased timeout to 10 seconds
            response = recognizer.recognize_google(audio)
            print(response)

            if any(exit_word in response.lower() for exit_word in exit_words):
                sending_to_gemini = False
                print("Stopped sending responses to Gemini.")
                engine.say("Stopped sending responses to Gemini.")
                engine.runAndWait()
                continue

            if wake_word in response.lower() and not sending_to_gemini:
                sending_to_gemini = True
                print("Resumed sending responses to Gemini.")
                engine.say("Resumed sending responses to Gemini.")
                engine.runAndWait()

            if sending_to_gemini:
                response_from_gemini = get_response(response)
                print(f"Gemini: {response_from_gemini}")
                # Fast output
                engine.say(response_from_gemini)
                engine.runAndWait()

        except sr.UnknownValueError:
            print("Didn't recognize anything.")
            engine.say("I didn't recognize anything, please try again.")
            engine.runAndWait()
        except sr.WaitTimeoutError:
            print("Listening timed out. Please try speaking again.")
            engine.say("Listening timed out. Please try speaking again.")
            engine.runAndWait()
